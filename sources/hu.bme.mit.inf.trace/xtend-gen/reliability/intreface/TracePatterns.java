package reliability.intreface;

import java.util.Collections;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;

@SuppressWarnings("all")
public class TracePatterns {
  public static CharSequence traceImports() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("//import epackage \"http://www.example.org/tracemodel\"");
    _builder.newLine();
    _builder.append("//import epackage \"http://www.eclipse.org/emf/2002/Ecore\"");
    _builder.newLine();
    _builder.append("import java hu.bme.mit.delta.mdd.MddHandle; ");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence traceConnectivesReduced() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("///////////////////////////////////");
    _builder.newLine();
    _builder.append("//////// Trace connectives ////////");
    _builder.newLine();
    _builder.append("///////////////////////////////////");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern unaryBETrace(element: EObject, name: EString, index: EInt, trace: UnaryTrace){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PartialInterpretation.reliabilityTrace(_, model);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("TraceModel.traces(model, trace);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("UnaryTrace.source(trace, element);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.generator(trace, name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.index(trace, index);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern unaryInsertion(element: EObject, name: java String, from: java Integer, to: java Integer, probability: java Double){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBERequiredName(element, name, to, probability);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("neg find unaryBETrace(element, name, _, _);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("from == 0;");
    _builder.newLine();
    _builder.append("} or {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBERequiredName(element, name, to, probability);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBETrace(element, name, _, _);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("from == max find unaryBETrace(element, name, #_, _);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("check(to > from);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern unaryUpdate(trace: UnaryTrace, probability: java Double){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBERequiredName(element, name, multiplicity, probability);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBETrace(element, name, index, trace);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.probability(trace, old);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("old != probability;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("check(multiplicity <= index);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern unaryRemoval(trace: UnaryTrace){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("UnaryTrace.source(trace, element);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.generator(trace, name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("neg find unaryBERequiredName(element, name, _, _);");
    _builder.newLine();
    _builder.append("} or {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBERequiredName(element, name, multiplicity, _);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("UnaryTrace.source(trace, element);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.generator(trace, name);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.index(trace, idx);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("check(idx > multiplicity);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern unaryHandleOf(element: EObject, name: EString, index: EInt, handle: Handle){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("find unaryBETrace(element, name, index, trace);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Trace.handle(trace, handle);");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }

  public static CharSequence traceConnectives() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _traceConnectivesReduced = TracePatterns.traceConnectivesReduced();
    _builder.append(_traceConnectivesReduced);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("pattern minimumNewOf(name: EString, multiplicity: EInt){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Scope.minNewElements(scp, multiplicity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Scope.targetTypeInterpretation(scp, pcti);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PartialComplexTypeInterpretation(pcti);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PartialComplexTypeInterpretation.interpretationOf(pcti, type);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Type.name(type, name);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("pattern maximumNewOf(name: EString, multiplicity: EInt){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Scope.maxNewElements(scp, multiplicity);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Scope.targetTypeInterpretation(scp, pcti);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PartialComplexTypeInterpretation(pcti);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("PartialComplexTypeInterpretation.interpretationOf(pcti, type);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Type.name(type, name);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static List<Object> getTimes() {
    return Collections.<Object>unmodifiableList(CollectionLiterals.<Object>newArrayList());
  }
}
